@page "/speedgame"
@inject NavigationManager NavigationManager
@implements IAsyncDisposable
@using Microsoft.AspNetCore.SignalR.Client;
@using Speed.Shared.Models;
@using Speed.Shared.Models.Enums
@using System
@using System.Collections
@using System.Text



<PageTitle>Speed!</PageTitle>

<h3>Speed</h3>


@if (!isConnected) {
    <div class="input-group">
        <input @bind="username" class="form-control" placeholder="What's your name?">
        <button class="btn btn-primary form-control-append" @onclick="ConnectToHub">
            Connect!
        </button>

    </div>


} else {
    
    @*<textarea style="width: 75%; height: 300px;">
        @messages
    </textarea>

    <div class="input-group">
        <input @bind-value="userMessage" @bind-value:event="oninput" class="form-control">
        <button class="btn btn-primary form-group-append" @onclick="Send" disabled="@(!isConnected)"> Send!</button>
        
    </div>

    <br />
    <br />*@



    <button class="btn btn-primary form-group-append" @onclick="createdeck"> Deck!</button>

        @*Top Player Area*@
        <div class="text-center">
            <img src="@currentCard" width=7% height=auto onclick=@nextCard class="m-5"/>

            @for(int i = 0; i < 5; i++)
            {
                <img src="card_back.png" width=7% height=auto onclick=@nextCard/>
            }
            <br />
        </div>
            
        @*Play Area*@
        <div class="text-center">
            <img src="@currentCard" width=7% height=auto onclick=@nextCard class="m-5"/>
            <img src="@currentCard" width=7% height=auto onclick=@nextCard/>
            <img src="@currentCard" width=7% height=auto onclick=@nextCard/>
            <img src="@currentCard" width=7% height=auto onclick=@nextCard class="m-5"/>
            <br />
        </div>   
        @*Bottom Player Area*@
        <div class='text-center'>
            @for(int i = 0; i < 5; i++)
            {
                <img src="card_back.png" width=7% height=auto onclick=@nextCard/>
            }

            <img src="@currentCard" width=7% height=auto onclick=@nextCard class="m-5"/>
        </div>

}

@code {

    private HubConnection? hubConnection;
    private string username = string.Empty;
    private string messages = string.Empty;
    private string userMessage = string.Empty;
    private string _hubUrl = string.Empty;
    private Deck deck;
    private string currentCard = "card_back.png";

    
    private async Task ConnectToHub() {

        hubConnection = new HubConnectionBuilder().WithUrl(NavigationManager.ToAbsoluteUri("/gamehub")).Build();

        hubConnection.On<string, string>("ReceiveMessage", (user, message) => {
            var msg = $"{(string.IsNullOrEmpty(user) ? "" : user + ": ")} {message}";
            messages += msg + "\n";
            Console.Write(messages);

            StateHasChanged();
        });

        await hubConnection.StartAsync();
    }

    private async Task Send() {
        if (hubConnection != null) {
            await hubConnection.SendAsync("SendMessage", username, userMessage);
            Console.WriteLine(userMessage);
            userMessage = string.Empty;
        }
    }

    public bool isConnected => hubConnection?.State == HubConnectionState.Connected;

    public async ValueTask DisposeAsync() {
        if (hubConnection != null) {
            await hubConnection.DisposeAsync();
        }
    }

    public void createdeck() {
        deck = new Deck();
        deck.BuildDeck();
        deck.Shuffle();

        foreach(Card card in deck) {

            Console.WriteLine(card.ToString());
        }

    }
    public void nextCard()
    {
        Card card = deck.DrawTopCard();
        if(card == null)
        {
            currentCard = "card_back.png";
        }
        else
        {
            currentCard = "" + (int) card.Value + card.Suit + ".png";
        }
        
    }
}
