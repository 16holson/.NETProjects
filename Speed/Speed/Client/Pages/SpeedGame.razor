@page "/speedgame"
@inject NavigationManager NavigationManager
@implements IAsyncDisposable
@using Microsoft.AspNetCore.SignalR.Client;
@using Speed.Shared.Models;
@using Speed.Shared.Models.Enums
@using System
@using System.Collections
@using System.Text



<PageTitle>Speed!</PageTitle>

<h3>Speed</h3>


@if (!isConnected) {
    <div class="input-group">
        <input @bind="username" class="form-control" placeholder="What's your name?">
        <button class="btn btn-primary form-control-append" @onclick="ConnectToHub">
            Connect!
        </button>

    </div>


} else {
    
    @*<textarea style="width: 75%; height: 300px;">
        @messages
    </textarea>

    <div class="input-group">
        <input @bind-value="userMessage" @bind-value:event="oninput" class="form-control">
        <button class="btn btn-primary form-group-append" @onclick="Send" disabled="@(!isConnected)"> Send!</button>
        
    </div>

    <br />
    <br />*@



    //<button class="btn btn-primary form-group-append" @onclick="createdeck"> Deck!</button>
        @*Top Player Area*@
        <div class="text-center">
            @*Player 2 Deck*@
            <img src="card_back.png" width=7% height=auto @onclick="() => GameEngine.GameService.addCards2()" class="m-5"/>

            @*Player 2 Hand*@
            @foreach(Card card in GameEngine.P2Hand)
            {
                <img src="@card.ToString()" class="m-1" width=7% height=auto style="box-shadow:@card.highlight" @onclick="() => GameEngine.GameService.onHandClick2(card)"/>
            }
            <br />
        </div>
            
        @*Play Area*@
        <div class="text-center">
            <span style="color:green; display:@GameEngine.GameService.p1Ready">Player 1 Ready</span>
            @*Left Draw*@
            <img src="card_back.png" width=7% height=auto @onclick="() => GameEngine.GameService.moveMiddle(p1)" class="m-5"/>

            @*2 Play Cards*@
            @if(GameEngine.Mid1Discard.Count == 0)
            {
                <img src="card_back.png" width=7% height=auto @onclick="() => GameEngine.GameService.onPlay(GameEngine.Mid1Discard)"/>
            }
            else
            {
                <img src="@GameEngine.Mid1Discard.Last().ToString()" width=7% height=auto @onclick="() => GameEngine.GameService.onPlay(GameEngine.Mid1Discard)"/>
            }
            @if(GameEngine.Mid2Discard.Count == 0)
            {
                <img src="card_back.png" width=7% height=auto @onclick="() => GameEngine.GameService.onPlay(GameEngine.Mid2Discard)"/>
            }
            else
            {
                <img src="@GameEngine.Mid2Discard.Last().ToString()" width=7% height=auto @onclick="() => GameEngine.GameService.onPlay(GameEngine.Mid2Discard)"/>
            }

            @*Right Draw*@
            <img src="card_back.png" width=7% height=auto @onclick="() => GameEngine.GameService.moveMiddle(p2)" class="m-5"/>
            <span style="color:green; display:@GameEngine.GameService.p2Ready">Player 2 Ready</span>
            <br />
        </div>   
        @*Bottom Player Area*@
        <div class='text-center'>
            @*Player 1 Hand*@
            @foreach(Card card in GameEngine.P1Hand)
            {
                <img src="@card.ToString()" class="m-1" width=7% height=auto style="box-shadow:@card.highlight" @onclick="() => GameEngine.GameService.onHandClick1(card)"/>
            }

            @*Player 1 Draw*@
            <img src="card_back.png" width=7% height=auto @onclick="() => GameEngine.GameService.addCards1()" class="m-5"/>
        </div>
        <div>
            <span style="display:@GameEngine.GameService.p1Won">Player 1 Won!</span>
            <span style="display:@GameEngine.GameService.p2Won">Player 2 Won!</span>
        </div>

}

@code {
    private HubConnection? hubConnection;
    private string username = string.Empty;
    private string messages = string.Empty;
    private string userMessage = string.Empty;
    private int numPlaying;
    private string clientId;
    private Card selectedCard;
    private List<Card> selectedSide;
    private String p1 = "one";
    private String p2 = "two";
    private GameEngine gameEngine = new GameEngine();    // The brains of the operation

    private string currentCard = "card_back.png";
    private string _hubUrl = string.Empty;



    private async Task ConnectToHub() {

        hubConnection = new HubConnectionBuilder().WithUrl(NavigationManager.ToAbsoluteUri("/gamehub")).Build();

        hubConnection.On<string, string>("ReceiveMessage", (user, message) => {
            var msg = $"{(string.IsNullOrEmpty(user) ? "" : user + ": ")} {message}";
            messages += msg + "\n";
            Console.Write(messages);
            PlayerLogin();
            StateHasChanged();
        });



        await hubConnection.StartAsync();
    }

    private async Task PlayerLogin()
    {
        await hubConnection.SendAsync("Login");
        hubConnection.On<string, int>("SetClientInfo", (clientConnectionId, numLoggedIn) =>
            {
                clientId = clientConnectionId;
                numPlaying = numLoggedIn;
            });
        Console.Write(clientId);
    }

    private async Task Send() {
        if (hubConnection != null) {
            await hubConnection.SendAsync("SendMessage", username, userMessage);
            Console.WriteLine(userMessage);
            userMessage = string.Empty;
        }
    }

    public bool isConnected => hubConnection?.State == HubConnectionState.Connected;

    public async ValueTask DisposeAsync() {
        if (hubConnection != null) {
            await hubConnection.DisposeAsync();
        }
    }
    public async void StartGame()
    {
        //nothing yet
    }

}
