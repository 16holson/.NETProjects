@page "/speedgame"
@inject NavigationManager NavigationManager
@implements IAsyncDisposable
@using Microsoft.AspNetCore.SignalR.Client;
@using Speed.Shared.Models;
@using Speed.Shared.Models.Enums;
@using System
@using System.Collections
@using System.Text
@using System.Text.Json;



<PageTitle>Speed!</PageTitle>

<h3>Speed</h3>



@if (!isConnected) {
    <div class="input-group">
        <input @bind="username" class="form-control" placeholder="What's your name?">
        <button class="btn btn-primary form-control-append" @onclick="ConnectToHub">
            Connect!
        </button>

    </div>


} else {
    
    <textarea style="width: 75%; height: 300px;">
        @messages
    </textarea>

    <div class="input-group">
        <input @bind-value="userMessage" @bind-value:event="oninput" class="form-control">
        <button class="btn btn-primary form-group-append" @onclick="Send" disabled="@(!isConnected)"> Send!</button>
        
    </div>

    <br />
    <br />

    <button class="btn btn-primary form-group-append" @onclick="RequestHand">Request Hand!</button>


    <div>
        <img src="@currentCard" width="250px" height="400px"/>
    </div>

}


@code {

    private HubConnection? hubConnection;
    private string username = string.Empty;
    private string messages = string.Empty;
    private string userMessage = string.Empty;


    private static Deck? deck;

    private string currentCard = "card_back.png";

    private bool playerOne = false;

    /// <summary>
    /// Connects to the gamehub
    /// </summary>
    /// <returns></returns>
    private async Task ConnectToHub() {

        hubConnection = new HubConnectionBuilder().WithUrl(NavigationManager.ToAbsoluteUri("/gamehub")).Build();

        hubConnection.On<string, string>("ReceiveMessage", (user, message) => {
            var msg = $"{(string.IsNullOrEmpty(user) ? "" : user + ": ")} {message}";
            messages += msg + "\n";
            Console.Write(messages);

            StateHasChanged();
        });


        hubConnection.On<string, List<Card>>("ReceiveDeck", (user, cards) => {

            Console.WriteLine(user);

            foreach(Card card in cards) {
                Console.WriteLine(card.ToString());
            }

            StateHasChanged();
        });

        hubConnection.On<List<Card>>("ReceiveHand", (hand) => {

            foreach (Card card in hand) {
                Console.WriteLine(card.ToString());
            }
        });

        hubConnection.On<string>("SetPlayer", (playername) => {

            playerOne = (playername == "Player 1") ? true : false;
        });

        await hubConnection.StartAsync();
    }

    /// <summary>
    /// Sends a message to all connected clients
    /// </summary>
    /// <returns></returns>
    private async Task Send() {
        if (hubConnection != null) {
            await hubConnection.SendAsync("SendMessage", username, userMessage);
            Console.WriteLine(userMessage);
            userMessage = string.Empty;
        }
    }



    public bool isConnected => hubConnection?.State == HubConnectionState.Connected;

    /// <summary>
    /// Used in signalR communication
    /// </summary>
    /// <returns></returns>
    public async ValueTask DisposeAsync() {
        if (hubConnection != null) {
            await hubConnection.DisposeAsync();
        }
    }


    //Used for testing
    public async void RequestDeck() {
        await hubConnection.SendAsync("RequestDeck");
    }

    /// <summary>
    /// Gets the users hand based on if they are player one or player two
    /// </summary>
    public async void RequestHand() {
        await hubConnection.SendAsync("RequestHand", playerOne);
    }


    /// <summary>
    /// Used for printing a card to the console while troubleshooting
    /// </summary>
    public void AssignCardFace(ref Card card)
    {
        currentCard = card.ToString();

    }

    

}




