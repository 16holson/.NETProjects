@page "/speedgame"
@inject NavigationManager NavigationManager
@implements IAsyncDisposable
@using Microsoft.AspNetCore.SignalR.Client;
@using Speed.Shared.Models;
@using Speed.Shared.Models.Enums
@using System
@using System.Collections
@using System.Text



<PageTitle>Speed!</PageTitle>

<h3>Speed</h3>


@if (!isConnected) {
    <div class="input-group">
        <input @bind="username" class="form-control" placeholder="What's your name?">
        <button class="btn btn-primary form-control-append" @onclick="ConnectToHub">
            Connect!
        </button>

    </div>


} else {
    
    @*<textarea style="width: 75%; height: 300px;">
        @messages
    </textarea>

    <div class="input-group">
        <input @bind-value="userMessage" @bind-value:event="oninput" class="form-control">
        <button class="btn btn-primary form-group-append" @onclick="Send" disabled="@(!isConnected)"> Send!</button>
        
    </div>

    <br />
    <br />*@



    //<button class="btn btn-primary form-group-append" @onclick="createdeck"> Deck!</button>
        @*Top Player Area*@
        <div class="text-center">
            <img src="card_back.png" width=7% height=auto @onclick="() => addHand(gameEngine.P2Draw, gameEngine.P2Hand)" class="m-5"/>
            @*@gameEngine.P2Draw.First().ToString()*@

            @foreach(Card card in gameEngine.P2Hand)
            {
                <img src="@card.ToString()" width=7% height=auto @onclick="() => playCard(card, gameEngine.P2Hand)"/>
            }
            <br />
        </div>
            
        @*Play Area*@
        <div class="text-center">
            <img src="card_back.png" width=7% height=auto @onclick="() => incrementMiddle(gameEngine.Mid1Draw, gameEngine.Mid1Discard)" class="m-5"/>
            @if(gameEngine.Mid1Discard.Count == 0)
            {
                <img src="card_back.png" width=7% height=auto @onclick="() => playedCard(gameEngine.Mid1Discard)"/>
            }
            else
            {
                <img src="@gameEngine.Mid1Discard.Last().ToString()" width=7% height=auto @onclick="() => playedCard(gameEngine.Mid1Discard)"/>
            }
            @if(gameEngine.Mid2Discard.Count == 0)
            {
                <img src="card_back.png" width=7% height=auto @onclick="() => playedCard(gameEngine.Mid2Discard)"/>
            }
            else
            {
                <img src="@gameEngine.Mid2Discard.Last().ToString()" width=7% height=auto @onclick="() => playedCard(gameEngine.Mid2Discard)"/>
            }
            <img src="card_back.png" width=7% height=auto @onclick="() => incrementMiddle(gameEngine.Mid2Draw, gameEngine.Mid2Discard)" class="m-5"/>
            <br />
        </div>   
        @*Bottom Player Area*@
        <div class='text-center'>
            @foreach(Card card in gameEngine.P1Hand)
            {
                <img src="@card.ToString()" width=7% height=auto @onclick="() => playCard(card, gameEngine.P1Hand)"/>
            }

            @*@gameEngine.P1Draw.First().ToString()*@
            <img src="card_back.png" width=7% height=auto @onclick="() => addHand(gameEngine.P1Draw, gameEngine.P1Hand)" class="m-5"/>
        </div>

}

@code {

    private HubConnection? hubConnection;
    private string username = string.Empty;
    private string messages = string.Empty;
    private string userMessage = string.Empty;
    private string highlight = "0px 12px 22px 1px #333;";
    private Card selectedCard;
    private List<Card> selectedSide;
    private GameEngine gameEngine = new GameEngine();    // The brains of the operation


    private string currentCard = "card_back.png";
    private string _hubUrl = string.Empty;



    private async Task ConnectToHub() {

        hubConnection = new HubConnectionBuilder().WithUrl(NavigationManager.ToAbsoluteUri("/gamehub")).Build();

        hubConnection.On<string, string>("ReceiveMessage", (user, message) => {
            var msg = $"{(string.IsNullOrEmpty(user) ? "" : user + ": ")} {message}";
            messages += msg + "\n";
            Console.Write(messages);

            StateHasChanged();
        });

        await hubConnection.StartAsync();
    }

    private async Task Send() {
        if (hubConnection != null) {
            await hubConnection.SendAsync("SendMessage", username, userMessage);
            Console.WriteLine(userMessage);
            userMessage = string.Empty;
        }
    }

    public bool isConnected => hubConnection?.State == HubConnectionState.Connected;

    public async ValueTask DisposeAsync() {
        if (hubConnection != null) {
            await hubConnection.DisposeAsync();
        }
    }
    public async void StartGame()
    {
        //nothing yet
    }
    public void resetMiddle()
    {
        //move cards from middle discard to middle draw
    }
    public void incrementMiddle(List<Card> outerMid, List<Card> innerMid)
    {
        //move card from outer middle to inner middle
        innerMid.Add(outerMid.First());
        outerMid.RemoveAt(0);
    }
    public void playCard(Card card, List<Card> side)
    {
        //remove from draw and add to hand
        selectedCard = card;
        selectedSide = side;
    }
    public void playedCard(List<Card> middleList) 
    {
        middleList.Add(selectedCard);
        selectedSide.Remove(selectedCard);
        selectedCard = null;
        selectedSide = null;
    }
    public void addHand(List<Card> deck, List<Card> hand)
    {
        if(hand.Count < 5)
        {
            hand.Add(deck.First());
            deck.RemoveAt(0);  
        }
        
    }

}
