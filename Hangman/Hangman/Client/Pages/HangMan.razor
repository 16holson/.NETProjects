@page "/hangman"
@inject HttpClient Http

@using Microsoft.AspNetCore.SignalR.Client
@using System.IO;

<PageTitle>Hangman</PageTitle>
<html lang="en">
    <body style="margin-top: 1rem">
        <div class="text-center h4">
            Hangman
        </div>
        <div class="text-center" style="margin-bottom: 3rem">
            <img src="@currentImage" />
        </div>

        @if (@randWord == "") {
                <p>Loading...</p>
        } else {

            <div class="text-center" style="display: @lostGame">


                @foreach (var l in randWord)
                {
                    if (wordList[l])
                    {
                        <span>&nbsp;&nbsp;@l&nbsp;&nbsp;&nbsp;&nbsp;</span>
                    }
                    else
                    {
                        <span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span>
                    }
                }
            </div>

            <p style="margin-bottom: -1.5rem; margin-top: -1.5rem"></p>
            <div class="text-center" style="display: @lostGame">
                @for (var i = 0; i < randWord.Length; i++)
                {
                    <span> ___&nbsp;</span>
                }
            </div>
            <div class="text-center" style="display: @lostGame">
                @foreach (var l in letterList)
                {
                    <button id="@l" class="btn btn-light btn-lg" style="margin: .1rem" disabled="@letters[l]" @onclick="() => OnPress(l)">@l</button>
                    if (l == 'P' || l == 'L')
                    {
                        <br>
                    }
                }
            </div>
        }
    <div>Random Word: @randWord</div>
    <div class="text-center h2" style="display: @newGameDisplay; width: 100%">
        <p>@results</p>
    </div>
        <div class="text-center"><button style="display: @newGameDisplay" id="reset" class="btn btn-primary btn-lg" @onclick="ResetButtons">New Game</button></div>
    </body>
</html>

@code
{
    int count = 0;
    int mistakes = 1;
    string distinctLetters;
    string randWord = "";
    string newGameDisplay = "none";
    string response;
    string lostGame = "block";
    string results;

    Dictionary<char, bool> wordList = new Dictionary<char, bool>();
    Dictionary<char, bool> letters = new Dictionary<char, bool>();
    char[] letterList = new char[] {'Q', 'W', 'E', 'R', 'T', 'Y', 'U', 'I', 'O', 'P', 'A', 'S', 'D', 'F', 'G', 'H', 'J', 'K', 'L', 'Z', 'X', 'C', 'V', 'B', 'N', 'M'};
    string currentImage = "HangmanBlank.png";
    
    void SetUpLists()
    {
        distinctLetters = new String(randWord.Distinct().ToArray());
        foreach (var l in letterList)
        {
            letters.Add(l, false);
        }
        foreach (var l in distinctLetters)
        {
            wordList.Add(l, false);
        }
    }

    Task OnInitialize()
    {
        return Task.CompletedTask;
    }
    
    protected override async Task OnInitializedAsync()
    {
        response = await Http.GetStringAsync("random_words.txt");
        PullRandWord(response);
        await OnInitialize();
    }

    private async void OnPress(char letter)
    {
        letters[letter] = true;
        bool correct = false;

        foreach (var l in wordList)
        {

            if (l.Key.Equals(letter))
            {
                wordList[letter] = true;
                count++;
                correct = true;
            }
        }

        if (!correct) {
            if (mistakes <= 5) {
                currentImage = $"strike{mistakes}.png";
                ++mistakes;
            } else if (mistakes == 6) {
                currentImage = $"dead.png";
                newGameDisplay = "inline";
                lostGame = "none";
                results = "You Lost";
            }
        }
        if (count >= wordList.Count)
        {
            lostGame = "none";
            currentImage = "congrats.png";
            newGameDisplay = "inline";
            results = "";
        }
    }
    private void ResetButtons()
    {
        lostGame = "block";
        count = 0;
        newGameDisplay = "none";
        currentImage = "HangmanBlank.png";
        mistakes = 1;
        randWord = "";
        letters.Clear();
        wordList.Clear();
        PullRandWord(response);
    }

    //Takes in a text file as a string, splits the string into a string array, picks a random string
    //and removes any quotations and leading/trailing blank spaces, sets all characters to uppercase
    //Once a word is chosen the lists are created via function call
    private async void PullRandWord(string file) {
        string[] spliter = file.Split("\n");
        var rand = new Random();
    
        int wordSelect = rand.Next(0, 10001);
    
        string word = spliter[wordSelect];
        randWord = word.Replace("\"", "");
        randWord = randWord.Trim();
    
        randWord = randWord.ToUpper();
    
        Console.WriteLine(randWord);
        SetUpLists();
    }
}

