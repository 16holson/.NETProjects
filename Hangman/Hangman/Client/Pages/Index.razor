@page "/"
@using Microsoft.AspNetCore.SignalR.Client
@inject NavigationManager NavigationManager
@implements IAsyncDisposable

<PageTitle>Index</PageTitle>

<body style="margin-top: 1rem;">
<div class="card mx-auto" style="width: 25%;">
    <h4 class="text-center" style="margin-top: .25rem">@sign</h4>
    <div class="card-body">
    <div class="form-group">
        <label>
            <input @bind="userInput" class="form-control" id="email" name="userInput" aria-describedby="emailHelp" placeholder="Enter Username" autofocus/>
        </label>
    </div>
    <div class="form-group">
        <label>
            <input @bind="passwordInput" style="margin-top: 1rem; margin-bottom: .5rem" type="password" class="form-control" id="password" name="password" placeholder="Enter Password"/>
        </label>
    </div>
    <div class="form-group">
        <label>
            <input @bind="password2Input" input style="margin-top: 1rem; margin-bottom: .5rem; display: @display" type="password" class="form-control" id="confirmPassword" name="password" placeholder="Confirm Password"/>
        </label>
    </div>
    <button class="btn btn-primary" disabled="@(!IsConnected)" @onclick="ConfirmPassword">@account</button>
    <button type="submit" class="btn btn-primary" disabled="@(!IsConnected)" @onclick="SignIn">@sign</button>
    <hr>

    <ul id="messagesList">
        @foreach (var message in messages)
        {
            <li>@message</li>
        }
    </ul>
    </div>
</div>

</body>
@code {
    private HubConnection? hubConnection;
    private List<string> messages = new List<string>();
    private string? userInput;
    private string? passwordInput;
    private string? password2Input;
    private String display = "none";
    private String account = "Create Account";
    private String sign = "Sign in";

    protected override async Task OnInitializedAsync()
    {
        hubConnection = new HubConnectionBuilder()
            .WithUrl(NavigationManager.ToAbsoluteUri("/notificationhub"))
            .Build();

        hubConnection.On<string, string>("ReceiveMessage", (user, password) =>
        {
            var encodedMsg = $"{user}: {password}";
            messages.Add(encodedMsg);
            StateHasChanged();
        });

        await hubConnection.StartAsync();
    }

    private async Task SignIn()
    {
        if (hubConnection is not null)
        {
            await hubConnection.SendAsync("SendMessage", userInput, passwordInput);
        }
    }

    private async Task ConfirmPassword()
    {
        if (display == "inline")
        {
            display = "none";
            account = "Create Account";
            sign = "Sign in";
        }
        else
        {
            display = "inline";
            account = "Sign In";
            sign = "Sign Up";
        }

        if (hubConnection is not null)
        {
            await hubConnection.SendAsync("SendMessage", userInput, passwordInput);
        }
    }

    public bool IsConnected =>
        hubConnection?.State == HubConnectionState.Connected;

    public async ValueTask DisposeAsync()
    {
        if (hubConnection is not null)
        {
            await hubConnection.DisposeAsync();
        }
    }
    //---------------------------------------------------------------------------login code -------------------------------------------------------//
    
    private void HangManPage()
    {
        NavigationManager.NavigateTo("/hangman");
    }

}
