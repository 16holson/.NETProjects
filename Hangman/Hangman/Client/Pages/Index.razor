@page "/"
@using Microsoft.AspNetCore.SignalR.Client
@using System.Security.Cryptography
@using System.Text
@inject NavigationManager NavigationManager
@inject HttpClient Http

@implements IAsyncDisposable

<PageTitle>Index</PageTitle>

<body style="margin-top: 1rem;">
<div class="card mx-auto" style="width: 25%;">
    <h4 class="text-center" style="margin-top: .25rem">@sign</h4>
    <div class="card-body">
        <div class="form-group text-center">
            <label>
                <input @bind="userInput" class="form-control" id="email" name="userInput" aria-describedby="emailHelp" placeholder="Enter Username" autofocus/>
            </label>
        </div>
        <div class="form-group text-center">
            <label>
                <input @bind="passwordInput" style="margin-top: 1rem; margin-bottom: .5rem" type="password" class="form-control" id="password" name="password" placeholder="Enter Password"/>
            </label>
        </div>
    
        <div class="form-group text-center">
            <label>
                <input @bind="password2Input" input style="margin-top: 1rem; margin-bottom: .5rem; display: @display" type="password" class="form-control" id="confirmPassword" name="password" placeholder="Confirm Password"/>
            </label>
        </div>
        <div class="form-group text-center">
            <button class="btn btn-primary" disabled="@(!IsConnected)" @onclick="CreateAccount">@account</button>
            <button type="submit" class="btn btn-primary" disabled="@(!IsConnected)" @onclick="SignIn">@sign</button>
        </div>
    </div>
    <hr>
    <ul id="messagesList">
        @foreach (var message in messages)
        {
            <li>@message</li>
        }
    </ul>



</div>

</body>
@code {
    private HubConnection? hubConnection;
    private List<string> messages = new List<string>();
    private string? userInput;
    private static string? passwordInput;
    private string? password2Input;
    private String display = "none";
    private String account = "Create Account";
    private String sign = "Sign in";
    private String salt;
    private string hashedSaltPass = "test";

    private string? response;

    List<string> filelist = new List<string>();


    protected override async Task OnInitializedAsync()
    {
        
        hubConnection = new HubConnectionBuilder()
            .WithUrl(NavigationManager.ToAbsoluteUri("/notificationhub"))
            .Build();

        hubConnection.On<string, string, string>("ReceiveMessage", (user, hashedPassword, salts) =>
        {
            var encodedMsg = $"{user}: {hashedPassword}: {salts}";
            messages.Add(encodedMsg);
            StateHasChanged();
        });

        await hubConnection.StartAsync();

        //response = await Http.GetStringAsync(@"Asset\Word");
       // response = await Http.GetStringAsync(@"random_words.txt");
       response = await Http.GetStringAsync("random_words.txt");


    }

    private async Task SignIn()
    {
        
        if (hubConnection is not null)
        {
            salt = CreateSalt();
            hashedSaltPass = ComputeHash(Convert.FromBase64String(passwordInput), Convert.FromBase64String(salt));   
            await hubConnection.SendAsync("SendMessage", userInput, hashedSaltPass, salt);
        }
    }

    private static string CreateSalt()
    {
        var saltBytes = new byte[32];
        var random = RandomNumberGenerator.Create();
        random.GetBytes(saltBytes);
        return Convert.ToBase64String(saltBytes);
    }

    private static string ComputeHash(byte[] bytesToHash, byte[] salt)
    {
        // HashAlgorithm algorithm = new SHA256Managed();
        // byte[] plainTextWithSaltBytes =
        //     new byte[bytesToHash.Length + salt.Length];
        // for (int i = 0; i < bytesToHash.Length; i++)
        // {
        //     plainTextWithSaltBytes[i] = bytesToHash[i];
        // }
        // for (int i = 0; i < salt.Length; i++)
        // {
        //     plainTextWithSaltBytes[bytesToHash.Length + i] = salt[i];
        // }
        // return Convert.ToBase64String(algorithm.ComputeHash(plainTextWithSaltBytes));

        var hmac = new HMACSHA256(salt);
        return Convert.ToBase64String(hmac.ComputeHash(bytesToHash));
    }

    private async Task CreateAccount()
    {
        if (display == "inline")
        {
            display = "none";
            account = "Create Account";
            sign = "Sign in";
        }
        else
        {
            display = "inline";
            account = "Sign In";
            sign = "Sign Up";
        }

        if (hubConnection is not null)
        {
            await hubConnection.SendAsync("SendMessage", userInput, hashedSaltPass, salt);
        }
    }

    public bool IsConnected =>
        hubConnection?.State == HubConnectionState.Connected;

    public async ValueTask DisposeAsync()
    {
        if (hubConnection is not null)
        {
            await hubConnection.DisposeAsync();
        }
    }
    //---------------------------------------------------------------------------login code -------------------------------------------------------//
    
    private void HangManPage()
    {
        NavigationManager.NavigateTo("/hangman");
    }
}
